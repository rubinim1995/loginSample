{"ast":null,"code":"import _objectSpread from \"/Users/rubinim/workspace/expense-management-system/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// export default function reducer(state = {\n//     isLoginSuccess: false,\n//     isLoginPending: false,\n//     loginError: null\n//   }, action) {\n//     switch (action.type) {\n//       case LOGIN:\n//         return Object.assign({}, state, {\n//           isLoginPending: action.isLoginPending\n//         });\n//       case SET_LOGIN_SUCCESS:\n//         return Object.assign({}, state, {\n//           isLoginSuccess: action.isLoginSuccess\n//         });\n//       case SET_LOGIN_ERROR:\n//         return Object.assign({}, state, {\n//           loginError: action.loginError\n//         });\n//       default:\n//         return state;\n//     }\n//   }\nconst initialState = {\n  loginStatus: false\n};\nexport default function location(state = initialState, action) {\n  switch (action.type) {\n    case 'LOGIN':\n      return _objectSpread({}, state, {\n        loginStatus: action.loginStatus\n      });\n\n    case 'GEOLOCATION_ERROR':\n      return _objectSpread({}, state, {\n        lastError: action.error\n      });\n\n    case 'GEOLOCATION_MOTION_CHANGE':\n      {\n        let mode = 'Stationary';\n\n        if (action.location.isMoving) {\n          mode = 'Moving';\n        }\n\n        return _objectSpread({}, state, {\n          motionMode: mode\n        });\n      }\n\n    case 'GEOLOCATION_PROVIDER_CHANGE':\n      return _objectSpread({}, state, {\n        provider: action.provider\n      });\n\n    case 'GEOLOCATION_ACTIVITY_CHANGE':\n      return _objectSpread({}, state, {\n        activity: action.activity\n      });\n\n    case 'GEOLOCATION_POST_COMPLETE':\n      return _objectSpread({}, state, {\n        lastHttpStatus: action.http.status,\n        lastHttpTimestamp: moment().format()\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/rubinim/workspace/expense-management-system/src/reducers/login.js"],"names":["initialState","loginStatus","location","state","action","type","lastError","error","mode","isMoving","motionMode","provider","activity","lastHttpStatus","http","status","lastHttpTimestamp","moment","format"],"mappings":";AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAG;AADK,CAArB;AAIA,eAAe,SAASC,QAAT,CAAkBC,KAAK,GAAGH,YAA1B,EAAwCI,MAAxC,EAAgD;AAC5D,UAAQA,MAAM,CAACC,IAAf;AAEC,SAAK,OAAL;AACE,+BACKF,KADL;AAEEF,QAAAA,WAAW,EAAEG,MAAM,CAACH;AAFtB;;AAKF,SAAK,mBAAL;AACE,+BACKE,KADL;AAEEG,QAAAA,SAAS,EAAEF,MAAM,CAACG;AAFpB;;AAKF,SAAK,2BAAL;AAAkC;AAChC,YAAIC,IAAI,GAAG,YAAX;;AACA,YAAIJ,MAAM,CAACF,QAAP,CAAgBO,QAApB,EAA8B;AAC5BD,UAAAA,IAAI,GAAG,QAAP;AACD;;AACD,iCACKL,KADL;AAEEO,UAAAA,UAAU,EAAEF;AAFd;AAID;;AAED,SAAK,6BAAL;AACE,+BACKL,KADL;AAEEQ,QAAAA,QAAQ,EAAEP,MAAM,CAACO;AAFnB;;AAKF,SAAK,6BAAL;AACE,+BACKR,KADL;AAEES,QAAAA,QAAQ,EAAER,MAAM,CAACQ;AAFnB;;AAKF,SAAK,2BAAL;AACE,+BACKT,KADL;AAEEU,QAAAA,cAAc,EAAET,MAAM,CAACU,IAAP,CAAYC,MAF9B;AAGEC,QAAAA,iBAAiB,EAAEC,MAAM,GAAGC,MAAT;AAHrB;;AAMF;AACE,aAAOf,KAAP;AA7CH;AA+CF","sourcesContent":["\n\n\n\n\n\n// export default function reducer(state = {\n//     isLoginSuccess: false,\n//     isLoginPending: false,\n//     loginError: null\n//   }, action) {\n//     switch (action.type) {\n//       case LOGIN:\n//         return Object.assign({}, state, {\n//           isLoginPending: action.isLoginPending\n//         });\n  \n//       case SET_LOGIN_SUCCESS:\n//         return Object.assign({}, state, {\n//           isLoginSuccess: action.isLoginSuccess\n//         });\n  \n//       case SET_LOGIN_ERROR:\n//         return Object.assign({}, state, {\n//           loginError: action.loginError\n//         });\n  \n//       default:\n//         return state;\n//     }\n//   }\n\n  \n\nconst initialState = {\n  loginStatus : false\n};\n\nexport default function location(state = initialState, action) {\n   switch (action.type) {\n   \n    case 'LOGIN':\n      return {\n        ...state,\n        loginStatus: action.loginStatus\n      };\n\n    case 'GEOLOCATION_ERROR':\n      return {\n        ...state,\n        lastError: action.error,\n      };\n\n    case 'GEOLOCATION_MOTION_CHANGE': {\n      let mode = 'Stationary';\n      if (action.location.isMoving) {\n        mode = 'Moving';\n      }\n      return {\n        ...state,\n        motionMode: mode,\n      };\n    }\n\n    case 'GEOLOCATION_PROVIDER_CHANGE':\n      return {\n        ...state,\n        provider: action.provider,\n      };\n\n    case 'GEOLOCATION_ACTIVITY_CHANGE':\n      return {\n        ...state,\n        activity: action.activity,\n      };\n\n    case 'GEOLOCATION_POST_COMPLETE':\n      return {\n        ...state,\n        lastHttpStatus: action.http.status,\n        lastHttpTimestamp: moment().format(),\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}